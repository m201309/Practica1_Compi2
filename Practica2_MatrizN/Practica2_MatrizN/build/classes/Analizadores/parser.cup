package Analizadores;
import practica2_matrizn.*;

import java.io.*;
import java.util.LinkedList;
import java_cup.runtime.*;

parser code
{:
        public TSimbolos tablaSimbolos =new TSimbolos ();
        public LinkedList<Errores> lista=new LinkedList<Errores>();
        
        public void setTablaSimbolos(TSimbolos tablaSimbolos){
            this.tablaSimbolos=tablaSimbolos;
        }
            /**Metodo al que se llama automaticamente ante algun error sintactico.*/
public void syntax_error(Symbol s){
       lista.add(new Errores(s.right+1,s.left,"Error sintactico Identificador " +s.value + " no reconocido." ));
    }
             /**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        lista.add(new Errores(s.right+1,s.left,"Error sintactico Identificador " +s.value + " no reconocido." ));
    }

:}
action code
{:

    int cant = 0;

    public static void escribir(String texto){
        
        try {
            FileWriter fw = new FileWriter("Codigo.txt",true);
            BufferedWriter bw = new BufferedWriter(fw);
            PrintWriter salid = new PrintWriter(bw);
            salid.println(texto);
            salid.close();
        }
        catch(java.io.IOException ioex) {
          System.out.println("se presento el error al crear el archivo Graphviz.txt: "+ioex.toString());
        }
    }

    public String genera_tmp(){
        String res = "t"+cant;
        cant++;
        return res;
    }

:}



/*DECLARACION DE LOS NO TERMINALES Y TERMINALES*/
terminal mas, por, pa, pc, ca, cc, igual, pts, coma, dec, entero;
terminal String num, id;

non terminal INICIA, LISTA, S;
non terminal Matriz MAT;
non terminal Expresiones E;
non terminal String TIPO;

precedence left coma, pts;
precedence left mas;
precedence left por;

start with INICIA;

INICIA ::= LISTA        {:System.out.println("salio");:};

LISTA ::= LISTA S   {: System.out.println("s2");:}
         | S        {: System.out.println("s1");:}
         ;

S ::= id:ids igual E:e       {: escribir( ids + "=" + e.cad); :}            
    | MAT:mt cc igual E:e    {: if (mt.tipo != 3){
                                    Boolean res = parser.tablaSimbolos.referencia(mt.id, mt.dim) ;
                                    if (!res)
                                        parser.lista.add(new Errores(mtright+1, mtleft, "Error SEMANTICO: referencia de dimensiones incorrecta" ));
                                    else 
                                       escribir( mt.id + "[" + mt.cad + "]" + "=" + e.cad); 
                                 }
                             :}

    | MAT:mt cc               {: if (mt.tipo == 0){
                                    parser.tablaSimbolos.set_NoDim(mt.id, mt.dim);
                                    escribir( mt.id + "[" + parser.tablaSimbolos.tamaño_matriz(mt.id) + "]"); 
                                 }

                                 if (mt.tipo == 1)
                                    parser.lista.add(new Errores(mtright+1, mtleft, "Error SEMANTICO: definir un valor para asignar" ));
                             :}
    ;

MAT ::= MAT:mt coma E:e
            {:   mt.dim = mt.dim +1;
                
                 if (mt.tipo == 0){     //SI ES DECLARACION
                        
                            parser.tablaSimbolos.nueva_dimension(mt.id, 1, e.val);
                            mt.setDim(mt.dim);
                        
                 }else{                 
                    if (mt.tipo == 1) {   //ERROR NO FUE DECLARADA
                        
                        if (mt.dim <= parser.tablaSimbolos.get_NoDim(mt.id)){
                            Boolean res = parser.tablaSimbolos.limite_valido(mt.id, mt.dim, e.val);
                            if (!res)
                                parser.lista.add(new Errores(eright+1, eleft, "Error SEMANTICO: el valor "+ e.val + " fuera del limite" ));
                            else{
                                int m = parser.tablaSimbolos.getInf(mt.id, mt.dim);
                                int z = parser.tablaSimbolos.tamaño_dim(mt.id, mt.dim);

                                String tmp = genera_tmp();
                                escribir (tmp + "=" + mt.cad + "*" + z);

                                String tmp1 = genera_tmp();
                                escribir (tmp1 + "=" + e.cad + "-" + m);

                                String tmp2 = genera_tmp();
                                escribir (tmp2 + "=" + tmp + "+" + tmp1);

                                mt.cad = tmp2;
                          }
                       }
                    }
                 }
                 
                 RESULT = mt;
                       
            :}
      | MAT:mt coma E:e1 pts E:e2
            {:  if (mt.tipo == 0){
                        if (e1.val < e2.val)
                            parser.tablaSimbolos.nueva_dimension(mt.id, e1.val, e2.val);
                        else
                            parser.lista.add(new Errores(e2right+1, e2left, "Error SEMANTICO: limites mal declarados" ));

                        mt.setDim(mt.dim+1);
                    
                }else if (mt.tipo == 1)
                    parser.lista.add(new Errores(e1right+1, e1left, "Error SEMANTICO: definicion de dimensiones incorrecta " ));
                
                RESULT = mt;
            :}

      | id:ids ca E:e
            {:   Boolean res = parser.tablaSimbolos.tabla.containsKey(ids);
                 Matriz mt = new Matriz(1, 1, ids, "");
                 int tp = 1;
                 if (!res){
                      parser.lista.add(new Errores(idsright+1, idsleft, "Error SEMANTICO: la variable "+ids+" no ha sido declarada" ));
                      tp = 3;
                 }else{
                      res = parser.tablaSimbolos.limite_valido(ids, 1, e.val);
                      if (!res)
                        parser.lista.add(new Errores(idsright+1, idsleft, "Error SEMANTICO: el valor "+ e.val + " fuera del limite" ));
                      else{
                        String tmp = genera_tmp();
                        int x = parser.tablaSimbolos.getInf(ids, 1);
                        escribir (tmp + "=" + e.cad + "-" + x);
                        mt.cad = tmp;
                      }
                 }
                 
                 mt.tipo = tp;   
                 RESULT = mt;
            :}

      | dec TIPO:tipo id:ids ca E:e1 pts E:e2
            {: TSimbolos datos = new TSimbolos (0, Integer.parseInt(tipo), 0);
                int tp = 0;
               Boolean res = parser.tablaSimbolos.agregar_val(ids, datos);
               if (!res){
                    parser.lista.add(new Errores(idsright+1, idsleft, "Error SEMANTICO: la variable "+ids+" ya fue declarada" ));
                    tp = 3;
               }else{
                    if (e1.val < e2.val)
                        parser.tablaSimbolos.nueva_dimension(ids, e1.val, e2.val);
                    else 
                        parser.lista.add(new Errores(idsright+1, idsleft, "Error SEMANTICO: limites mal declarados" ));
               }

               RESULT = new Matriz(1, tp, ids, "");
            :}
            
            
      | dec TIPO:tipo id:ids ca E:e 
            {: TSimbolos datos = new TSimbolos (0, Integer.parseInt(tipo), 0);
               int tp = 0;
               Boolean res = parser.tablaSimbolos.agregar_val(ids, datos);
               if (!res){
                    parser.lista.add(new Errores(idsright+1, idsleft, "Error SEMANTICO: la variable "+ids+" ya fue declarada" ));
                    
                    /* EN ESTE CASO TIPO = 3, seria error*/
                    tp = 3;
               }else
                    parser.tablaSimbolos.nueva_dimension(ids, 1, e.val);
                    
               RESULT = new Matriz(1, tp, ids, "");
            :}
            
  ;

TIPO ::= entero {: RESULT = "0"; :}
        ;
        

/*--------------------------EXPRESIONES---------------------*/
            
E ::= E:e1 mas E:e2  {:    String tmp = genera_tmp();
                           escribir(tmp+ "=" + e1.cad + "+" + e2.cad);
                           RESULT = new Expresiones(e1.val+e2.val, tmp);
                     :}
    | E:e1 por E:e2  {:    String tmp = genera_tmp();
                           escribir(tmp+ "=" + e1.cad + "*" + e2.cad);
                           RESULT = new Expresiones (e1.val*e2.val, tmp);
                     :}
    | pa E:e pc   {:  RESULT = e; :}       
    | num:nm      {:  RESULT = new Expresiones(Integer.parseInt(nm), nm);:}       
    | id:ids      {:  RESULT = new Expresiones(0, ids );:}

    | MAT:mt cc   {:  if (mt.tipo != 3){
                        Boolean res = parser.tablaSimbolos.referencia(mt.id, mt.dim) ;
                        if (!res)
                          parser.lista.add(new Errores(mtright+1, mtleft, "Error SEMANTICO: referencia de dimensiones incorrecta" ));

                        String tmp = genera_tmp();
                        escribir (tmp + "=" + mt.id + "[" + mt.cad + "]");
                     }
                      RESULT = new Expresiones(0, mt.cad);
                  :}
    ;